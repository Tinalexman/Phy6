package dream.components.graphics;

import org.lwjgl.system.MemoryUtil;

import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.ArrayList;
import java.util.List;

import static org.lwjgl.opengl.GL11.GL_FLOAT;
import static org.lwjgl.opengl.GL15.*;
import static org.lwjgl.opengl.GL20.*;
import static org.lwjgl.opengl.GL20.glEnableVertexAttribArray;
import static org.lwjgl.opengl.GL30.*;

public class Mesh
{
    public transient float[] vertices;
    public transient float[] textures;
    public transient float[] normals;
    public transient int[] indices;

    private final transient int VAO_ID;

    private final transient List<Integer> LIST_OF_VBOS;

    public static final transient int cubeMesh = 1;
    public static final transient int planeMesh = 2;
    public static final transient int sphereMesh = 3;

    public Mesh(int meshType)
    {
        this.VAO_ID = glGenVertexArrays();
        this.LIST_OF_VBOS = new ArrayList<>();
        setMesh(meshType);
    }

    public Mesh()
    {
        this.VAO_ID = glGenVertexArrays();
        this.LIST_OF_VBOS = new ArrayList<>();
    }

    public void onStart()
    {
        if(this.vertices == null && this.textures == null && this.normals == null)
            setMesh(planeMesh);
        load();
    }

    public void onDestroyRequested()
    {
        for(int vbo : LIST_OF_VBOS)
            glDeleteBuffers(vbo);
        glDeleteVertexArrays(this.VAO_ID);
    }

    public void setMesh(int meshFlag)
    {
        if(meshFlag == cubeMesh)
            setCubeMesh(0.2f);
        else if(meshFlag == planeMesh)
            setPlaneMesh(0.5f);
        else if(meshFlag == sphereMesh)
            setIcoSphereMesh(0.2f);
    }

    private void setPlaneMesh(float size)
    {
        this.vertices = new float[]
        {
               -size, size, 0.0f,
               -size, -size, 0.0f,
               size, -size, 0.0f,
               -size, size, 0.0f,
               size, -size, 0.0f,
               size, size, 0.0f
        };

//        this.textures = new float[]
//        {
//                0.0f, 0.0f,
//                1.0f, 0.0f,
//                1.0f, 1.0f,
//                1.0f, 1.0f,
//                0.0f, 1.0f,
//                0.0f, 0.0f,
//        };
//
//        this.normals = new float[]
//        {
//                0.0f, 0.0f, -1.0f,
//                0.0f, 0.0f, -1.0f,
//                0.0f, 0.0f, -1.0f,
//                0.0f, 0.0f, -1.0f,
//                0.0f, 0.0f, -1.0f,
//                0.0f, 0.0f, -1.0f,
//        };
    }

    private void setCubeMesh(float size)
    {
        this.vertices = new float[]
                {
                        -size, -size, -size,
                        size, -size, -size,
                        size, size, -size,
                        size, size, -size,
                        -size, size, -size,
                        -size, -size, -size,

                        -size, -size, size,
                        size, -size, size,
                        size, size, size,
                        size, size, size,
                        -size, size, size,
                        -size, -size, size,

                        -size, size, size,
                        -size, size, -size,
                        -size, -size, -size,
                        -size, -size, -size,
                        -size, -size, size,
                        -size, size, size,

                        size, size, size,
                        size, size, -size,
                        size, -size, -size,
                        size, -size, -size,
                        size, -size, size,
                        size, size, size,

                        -size, -size, -size,
                        size, -size, -size,
                        size, -size, size,
                        size, -size, size,
                        -size, -size, size,
                        -size, -size, -size,

                        -size, size, -size,
                        size, size, -size,
                        size, size, size,
                        size, size, size,
                        -size, size, size,
                        -size, size, -size
                };

//        this.textures = new float[]
//                {
//                        0.0f, 0.0f,
//                        1.0f, 0.0f,
//                        1.0f, 1.0f,
//                        1.0f, 1.0f,
//                        0.0f, 1.0f,
//                        0.0f, 0.0f,
//
//                        0.0f, 0.0f,
//                        1.0f, 0.0f,
//                        1.0f, 1.0f,
//                        1.0f, 1.0f,
//                        0.0f, 1.0f,
//                        0.0f, 0.0f,
//
//                        1.0f, 0.0f,
//                        1.0f, 1.0f,
//                        0.0f, 1.0f,
//                        0.0f, 1.0f,
//                        0.0f, 0.0f,
//                        1.0f, 0.0f,
//
//                        1.0f, 0.0f,
//                        1.0f, 1.0f,
//                        0.0f, 1.0f,
//                        0.0f, 1.0f,
//                        0.0f, 0.0f,
//                        1.0f, 0.0f,
//
//                        0.0f, 1.0f,
//                        1.0f, 1.0f,
//                        1.0f, 0.0f,
//                        1.0f, 0.0f,
//                        0.0f, 0.0f,
//                        0.0f, 1.0f,
//
//                        0.0f, 1.0f,
//                        1.0f, 1.0f,
//                        1.0f, 0.0f,
//                        1.0f, 0.0f,
//                        0.0f, 0.0f,
//                        0.0f, 1.0f
//                };
//
//        this.normals = new float[]
//                {
//                        0.0f, 0.0f, -1.0f,
//                        0.0f, 0.0f, -1.0f,
//                        0.0f, 0.0f, -1.0f,
//                        0.0f, 0.0f, -1.0f,
//                        0.0f, 0.0f, -1.0f,
//                        0.0f, 0.0f, -1.0f,
//
//                        0.0f, 0.0f, 1.0f,
//                        0.0f, 0.0f, 1.0f,
//                        0.0f, 0.0f, 1.0f,
//                        0.0f, 0.0f, 1.0f,
//                        0.0f, 0.0f, 1.0f,
//                        0.0f, 0.0f, 1.0f,
//
//                        -1.0f, 0.0f, 0.0f,
//                        -1.0f, 0.0f, 0.0f,
//                        -1.0f, 0.0f, 0.0f,
//                        -1.0f, 0.0f, 0.0f,
//                        -1.0f, 0.0f, 0.0f,
//                        -1.0f, 0.0f, 0.0f,
//
//                        1.0f, 0.0f, 0.0f,
//                        1.0f, 0.0f, 0.0f,
//                        1.0f, 0.0f, 0.0f,
//                        1.0f, 0.0f, 0.0f,
//                        1.0f, 0.0f, 0.0f,
//                        1.0f, 0.0f, 0.0f,
//
//                        0.0f, -1.0f, 0.0f,
//                        0.0f, -1.0f, 0.0f,
//                        0.0f, -1.0f, 0.0f,
//                        0.0f, -1.0f, 0.0f,
//                        0.0f, -1.0f, 0.0f,
//                        0.0f, -1.0f, 0.0f,
//
//                        0.0f, 1.0f, 0.0f,
//                        0.0f, 1.0f, 0.0f,
//                        0.0f, 1.0f, 0.0f,
//                        0.0f, 1.0f, 0.0f,
//                        0.0f, 1.0f, 0.0f,
//                        0.0f, 1.0f, 0.0f
//                };
    }

    private void setIcoSphereMesh(float size)
    {
        final float horizontalAngle = (float) (Math.PI * 0.4f); // 72 degrees
        final float verticalAngle = (float) Math.atan(0.5); // elevation = 26.565 degrees

        float[] vertices = new float[36];  // array of 12 vertices
        int i1, i2;
        float z, xy;
        float hAngle1 = (float) ((-Math.PI * 0.5) - (horizontalAngle * 0.5));
        float hAngle2 = (float) (-Math.PI * 0.5);

        vertices[0] = 0;
        vertices[1] = 0;
        vertices[2] = size;

        for(int i = 1; i <= 5; ++i)
        {
            i1 = i * 3;
            i2 = (i + 5) * 3;

            z = (float) (size * Math.sin(verticalAngle));
            xy = (float) (size * Math.cos(verticalAngle));

            vertices[i1] = (float) (xy * Math.cos(hAngle1));
            vertices[i2] = (float) (xy * Math.cos(hAngle2));
            vertices[i1 + 1] = (float) (xy * Math.sin(hAngle1));
            vertices[i2 + 1] = (float) (xy * Math.sin(hAngle2));
            vertices[i1 + 2] = z;
            vertices[i2 + 2] = -z;

            hAngle1 += horizontalAngle;
            hAngle2 += horizontalAngle;
        }

        i1 = 11 * 3;
        vertices[i1] = 0;
        vertices[i1 + 1] = 0;
        vertices[i1 + 2] = -size;
    }

    public void enable()
    {
        glBindVertexArray(this.VAO_ID);
        if(this.vertices != null)
            glEnableVertexAttribArray(0);
        if(this.textures != null)
            glEnableVertexAttribArray(1);
        if(this.normals != null)
            glEnableVertexAttribArray(2);
    }

    public int getVertexCount()
    {
        if(indices != null)
            return this.indices.length;
        else
            return this.vertices.length / 3;
    }

    public void disable()
    {
        if(this.vertices != null)
            glDisableVertexAttribArray(0);
        if(this.textures != null)
            glDisableVertexAttribArray(1);
        if(this.normals != null)
            glDisableVertexAttribArray(2);
        glBindVertexArray(0);
    }


    public void load()
    {
        glBindVertexArray(this.VAO_ID);
        if(this.vertices != null)
            createVBO(0, 3, this.vertices);
        if(this.textures  != null)
            createVBO(1, 2, this.textures);
        if(this.normals != null)
            createVBO(2, 3, this.normals);
        if(this.indices != null)
            createEBO(this.indices);
        disable();
    }

    private void createEBO(int[] data)
    {
        int eboID = glGenBuffers();
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, eboID);
        IntBuffer buffer = createIntBuffer(data);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, buffer, GL_STATIC_DRAW);
    }

    private void createVBO(int location, int size, float[] data)
    {
        int vboID = glGenBuffers();
        glBindBuffer(GL_ARRAY_BUFFER, vboID);
        FloatBuffer buffer = createFloatBuffer(data);
        glBufferData(GL_ARRAY_BUFFER, buffer, GL_STATIC_DRAW);
        glVertexAttribPointer(location, size, GL_FLOAT, false, 0, 0);
        glEnableVertexAttribArray(location);
        MemoryUtil.memFree(buffer);
        this.LIST_OF_VBOS.add(vboID);
    }

    private static FloatBuffer createFloatBuffer(float[] coordinates)
    {
        FloatBuffer buffer = MemoryUtil.memAllocFloat(coordinates.length);
        buffer.put(coordinates).flip();
        return buffer;
    }

    private static IntBuffer createIntBuffer(int[] coordinates)
    {
        IntBuffer buffer = MemoryUtil.memAllocInt(coordinates.length);
        buffer.put(coordinates).flip();
        return buffer;
    }

}
